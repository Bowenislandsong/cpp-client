/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "dependency_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace uber { namespace jaeger { namespace thrift {


DependencyLink::~DependencyLink() throw() {
}


void DependencyLink::__set_parent(const std::string& val) {
  this->parent = val;
}

void DependencyLink::__set_child(const std::string& val) {
  this->child = val;
}

void DependencyLink::__set_callCount(const int64_t val) {
  this->callCount = val;
}

uint32_t DependencyLink::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_parent = false;
  bool isset_child = false;
  bool isset_callCount = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->parent);
          isset_parent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->child);
          isset_child = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->callCount);
          isset_callCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_parent)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_child)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_callCount)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DependencyLink::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DependencyLink");

  xfer += oprot->writeFieldBegin("parent", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->parent);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("child", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->child);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("callCount", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->callCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DependencyLink &a, DependencyLink &b) {
  using ::std::swap;
  swap(a.parent, b.parent);
  swap(a.child, b.child);
  swap(a.callCount, b.callCount);
}

DependencyLink::DependencyLink(const DependencyLink& other0) {
  parent = other0.parent;
  child = other0.child;
  callCount = other0.callCount;
}
DependencyLink::DependencyLink( DependencyLink&& other1) {
  parent = std::move(other1.parent);
  child = std::move(other1.child);
  callCount = std::move(other1.callCount);
}
DependencyLink& DependencyLink::operator=(const DependencyLink& other2) {
  parent = other2.parent;
  child = other2.child;
  callCount = other2.callCount;
  return *this;
}
DependencyLink& DependencyLink::operator=(DependencyLink&& other3) {
  parent = std::move(other3.parent);
  child = std::move(other3.child);
  callCount = std::move(other3.callCount);
  return *this;
}
void DependencyLink::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DependencyLink(";
  out << "parent=" << to_string(parent);
  out << ", " << "child=" << to_string(child);
  out << ", " << "callCount=" << to_string(callCount);
  out << ")";
}


Dependencies::~Dependencies() throw() {
}


void Dependencies::__set_links(const std::vector<DependencyLink> & val) {
  this->links = val;
}

uint32_t Dependencies::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_links = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->links.clear();
            uint32_t _size4;
            ::apache::thrift::protocol::TType _etype7;
            xfer += iprot->readListBegin(_etype7, _size4);
            this->links.resize(_size4);
            uint32_t _i8;
            for (_i8 = 0; _i8 < _size4; ++_i8)
            {
              xfer += this->links[_i8].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_links = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_links)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Dependencies::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Dependencies");

  xfer += oprot->writeFieldBegin("links", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->links.size()));
    std::vector<DependencyLink> ::const_iterator _iter9;
    for (_iter9 = this->links.begin(); _iter9 != this->links.end(); ++_iter9)
    {
      xfer += (*_iter9).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Dependencies &a, Dependencies &b) {
  using ::std::swap;
  swap(a.links, b.links);
}

Dependencies::Dependencies(const Dependencies& other10) {
  links = other10.links;
}
Dependencies::Dependencies( Dependencies&& other11) {
  links = std::move(other11.links);
}
Dependencies& Dependencies::operator=(const Dependencies& other12) {
  links = other12.links;
  return *this;
}
Dependencies& Dependencies::operator=(Dependencies&& other13) {
  links = std::move(other13.links);
  return *this;
}
void Dependencies::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Dependencies(";
  out << "links=" << to_string(links);
  out << ")";
}

}}} // namespace
